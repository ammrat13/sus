# Makefile for this project
#
# Needed since we need to do custom operations for installation. In particular,
# need to install some parts as setuid root. We use `cargo-make` instead of just
# a standard `Makefile` because it integrates better.
#
# See: https://github.com/sagiegurari/cargo-make


[env]
# Fail on any lint errors
CARGO_MAKE_CLIPPY_ARGS = "-- -D warnings"


# Pass the same features to `cargo check` as we do for the build
[tasks.check]
args = [ "check", "@@split(CARGO_MAKE_CARGO_BUILD_TEST_FLAGS, )" ]

# Run audit unconditionally
[tasks.audit]
condition = {}


# Task to format the configuration files
# The check will happen on the copy, but it won't update the original
# Use a script for globbing
[tasks.sus-format-config]
description = "Run rustfmt on the configuration files"
category = "Development"
dependencies = [ "install-rustfmt" ]
script = "rustfmt config/*.rs"


# Task to build the application in debug mode
# It also runs formatting and linting
[tasks.sus-debug-build]
description = "Workflow to build and test SUS in debug mode"
category = "Development"
dependencies = [
    "check",
    "format",
    "sus-format-config",
    "clippy",
    "test",
    "build",
]

# Task to build the application in release mode
# It runs formatting and linting, but in check mode only. This task is for
#  release builds, so the code should be good to go. Also, we don't need to
#  explicitly do the configuration files. They will be copied over then checked.
# It also generates documentation
[tasks.sus-release-build]
description = "Workflow to build and test SUS in release mode"
category = "CI"
dependencies = [
    "verify-project",
    "audit",
    "check",
    "check-format",
    "clippy",
    "test",
    "build-release",
    "docs",
]

# Task to build the application for end users
# It calls into `sus-release-build`, except it doesn't have `--all-features`
#  enabled. Only the default features are compiled.
[tasks.sus-dist-build]
env = { "CARGO_MAKE_CARGO_BUILD_TEST_FLAGS" = "" }
run_task = "sus-release-build"


# Task to install
# We have to install the kernel as setuid root
[tasks.install]
description = "Install the application"
category = "Install"
dependencies = [ "sus-dist-build" ]
env_files = [
    { path = "./config/install.env" }
]

script = '''

    # Install the kernel itself
    install \
        --owner=0 --group=0 \
        --mode=4755 \
        --strip \
        --target-directory="${SUS_INSTALL_PREFIX}/${SUS_INSTALL_DIRECTORY}" \
        "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/release/sus-kernel"

    # Install the configuration file
    install \
        --owner=0 --group=0
        --mode=660
        --no-target-directory
        "config/sample/sudoers.json" "${SUS_SUDOERS_PATH}"

'''


# Default task is to build in debug mode
[tasks.default]
alias = "sus-debug-build"
